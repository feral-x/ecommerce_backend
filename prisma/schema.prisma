generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    email    String @unique
    password String

    name     String?
    picture  String?
    reviews  Review[]
    orders   Order[]
    wishList WishListItem[]

    role Role @default(USER)
}

model Product {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title       String
    description String
    price       Int

    images String[]

    categories Category[]
    color      Color?     @relation(fields: [colorId], references: [id])
    colorId    String?

    reviews Review[]

    WishListItem WishListItem[]
    OrderItem    OrderItem[]
    Inventory    Inventory?
}

model Category {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title       String
    description String

    products Product[]
}

model Color {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title String
    value String

    products Product[]
}

model Review {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    product   Product @relation(fields: [productId], references: [id])
    productId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

enum StatusEnum {
    PENDING
    PAYED
    CANCELED
}

model Order {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    status StatusEnum

    user      User        @relation(fields: [userId], references: [id])
    userId    String
    OrderItem OrderItem[]
}

model WishListItem {
    id        String  @id @default(uuid())
    userId    String
    productId String
    user      User    @relation(fields: [userId], references: [id])
    product   Product @relation(fields: [productId], references: [id])
}

model OrderItem {
    id        String @id @default(uuid())
    orderId   String
    productId String
    quantity  Int
    price     Int

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model Inventory {
    id        String  @id @default(uuid())
    productId String  @unique
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int
}
